{
  "description": "Backup is a Velero resource that respresents the capture of Kubernetes cluster state at a point in time (API objects and associated volume state).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupSpec defines the specification for a Velero backup.",
      "type": "object",
      "properties": {
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not included in the backup.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "excludedResources": {
          "description": "ExcludedResources is a slice of resource names that are not included in the backup.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "hooks": {
          "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
          "type": "object",
          "properties": {
            "resources": {
              "description": "Resources are hooks that should be executed when backing up individual instances of a resource.",
              "type": "array",
              "items": {
                "description": "BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "excludedNamespaces": {
                    "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "excludedResources": {
                    "description": "ExcludedResources specifies the resources to which this hook spec does not apply.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "includedNamespaces": {
                    "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "includedResources": {
                    "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "labelSelector": {
                    "description": "LabelSelector, if specified, filters the resources to which this hook spec applies.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "nullable": true
                  },
                  "name": {
                    "description": "Name is the name of this hook.",
                    "type": "string"
                  },
                  "post": {
                    "description": "PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all \"additional items\" from item actions are processed.",
                    "type": "array",
                    "items": {
                      "description": "BackupResourceHook defines a hook for a resource.",
                      "type": "object",
                      "required": [
                        "exec"
                      ],
                      "properties": {
                        "exec": {
                          "description": "Exec defines an exec hook.",
                          "type": "object",
                          "required": [
                            "command"
                          ],
                          "properties": {
                            "command": {
                              "description": "Command is the command and arguments to execute.",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "string"
                              }
                            },
                            "container": {
                              "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                              "type": "string"
                            },
                            "onError": {
                              "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                              "type": "string",
                              "enum": [
                                "Continue",
                                "Fail"
                              ]
                            },
                            "timeout": {
                              "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "pre": {
                    "description": "PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any \"additional items\" from item actions are processed.",
                    "type": "array",
                    "items": {
                      "description": "BackupResourceHook defines a hook for a resource.",
                      "type": "object",
                      "required": [
                        "exec"
                      ],
                      "properties": {
                        "exec": {
                          "description": "Exec defines an exec hook.",
                          "type": "object",
                          "required": [
                            "command"
                          ],
                          "properties": {
                            "command": {
                              "description": "Command is the command and arguments to execute.",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "string"
                              }
                            },
                            "container": {
                              "description": "Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
                              "type": "string"
                            },
                            "onError": {
                              "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                              "type": "string",
                              "enum": [
                                "Continue",
                                "Fail"
                              ]
                            },
                            "timeout": {
                              "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "nullable": true
            }
          }
        },
        "includeClusterResources": {
          "description": "IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.",
          "type": "boolean",
          "nullable": true
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "includedResources": {
          "description": "IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "labelSelector": {
          "description": "LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "nullable": true
        },
        "snapshotVolumes": {
          "description": "SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.",
          "type": "boolean",
          "nullable": true
        },
        "storageLocation": {
          "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
          "type": "string"
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long the Backup should be retained for.",
          "type": "string"
        },
        "volumeSnapshotLocations": {
          "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "status": {
      "description": "BackupStatus captures the current status of a Velero backup.",
      "type": "object",
      "properties": {
        "completionTimestamp": {
          "description": "CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps",
          "type": "string",
          "format": "date-time",
          "nullable": true
        },
        "errors": {
          "description": "Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.",
          "type": "integer"
        },
        "expiration": {
          "description": "Expiration is when this Backup is eligible for garbage-collection.",
          "type": "string",
          "format": "date-time",
          "nullable": true
        },
        "phase": {
          "description": "Phase is the current state of the Backup.",
          "type": "string",
          "enum": [
            "New",
            "FailedValidation",
            "InProgress",
            "Completed",
            "PartiallyFailed",
            "Failed",
            "Deleting"
          ]
        },
        "startTimestamp": {
          "description": "StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps",
          "type": "string",
          "format": "date-time",
          "nullable": true
        },
        "validationErrors": {
          "description": "ValidationErrors is a slice of all validation errors (if applicable).",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "version": {
          "description": "Version is the backup format version.",
          "type": "integer"
        },
        "volumeSnapshotsAttempted": {
          "description": "VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.",
          "type": "integer"
        },
        "volumeSnapshotsCompleted": {
          "description": "VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.",
          "type": "integer"
        },
        "warnings": {
          "description": "Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.",
          "type": "integer"
        }
      }
    }
  }
}